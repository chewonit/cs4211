#import "PAT.Lib.Queue";

#define NUM_CHEFS 2;
#define NUM_ORDERS 20;
#define COOKING_TIME 2;
#define ORDER_ARRIVAL_INTERVAL 1;

var<Queue> order_queue;
var<Queue> chef_occupied_queue;

var chefs_occupied = 0;
var global_time = 0;
var total_orders = NUM_ORDERS;


channel c_order_arrived 0;
channel c_order_hold 0;
channel c_order_proceed 0;

Restaurant = c_order_arrived?i -> tau{order_queue.Enqueue(i)} -> Kitchen;
Kitchen = if(chef_occupied_queue.Count()==3) 
		  {
				c_order_hold!order_queue.Last() -> Restaurant
		  }
		  else
		  {
				c_order_proceed!order_queue.First() -> Kitchen
		  };
			
Cook(i) = tau{chef_occupied_queue.Enqueue(i)} -> Wait[COOKING_TIME]; FinishCook(i);
FinishCook(i) = tau{chef_occupied_queue.Dequeue(i)} -> OrderArrive(i);
HoldOrder(i) = c_order_proceed?i -> Cook(i);
OrderArrive(i) = Wait[ORDER_ARRIVAL_INTERVAL]; c_order_arrived!i -> (Cook(i)) [] (c_order_hold?i -> HoldOrder(i));

System =  (||| x:{0..NUM_ORDERS-1}@OrderArrive(x)) ||| Restaurant;
		  	
#assert System deadlockfree;
#define overflow (order_queue.Count() > 10);
#assert System reaches overflow;