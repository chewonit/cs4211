enum{Enter, Leave};

enum{REDUNDANT_CHECKING, REDUNDANT, REDUNDANT_NO};
var redundancy_menu = REDUNDANT_CHECKING;
var redundant_menu_count = 0;


enum{DishA, DishB, DishC, DishD, DishE, DishF};
var price = [8, 9, 8, 10, 5, 3];
var stock = [3, 3, 3, 0, 3, 3];
var stock_arr = [3, 3, 3, 0, 3, 3];
var priceOfReStock = [2, 3, 2, 4, 2, 1];
var out_of_stock = false;


#define customer 1000;
 
#define chef 3;
#define staff 3;
#define manager 1;
#define cleaner 2;
#define amount_to_restock 10;
#define noOfDish 6;
#define targetSales 100;


var pos = -1;
var order = -1;
var sales;
var index;
#define costPerDay 200;
var food_has_been_ordered[noOfDish];


Init() = {
	pos = -1;
	sales = 0;
	index = 0;
	order = -1;
	out_of_stock = false;
	
	redundancy_menu = REDUNDANT_CHECKING;
	redundant_menu_count = 0;
	
	var i = 0;
	while(i < noOfDish) {
		food_has_been_ordered[i] = 0;
		stock[i] = stock_arr[i];
		i++;
	}
	
	
}->Skip();


Cus_System() = Init(); Cus_Process();

Cus_Process() = Cus_Choose_Dish();
	if(index == customer || sales > costPerDay || out_of_stock == true) 
	{	
		check_redundant_menu {
			var i =0;
			var has_redundant_menu = false;
			
			while (i < noOfDish) {
				if( food_has_been_ordered [i] == 0)
				{
					if(!has_redundant_menu)
					{
						has_redundant_menu = true;
					}
					redundant_menu_count++;
				}
				i++;
			}
			
			if(has_redundant_menu)
			{
				redundancy_menu = REDUNDANT;
			}
			else 
			{
				redundancy_menu = REDUNDANT_NO;
			}
		}
		->Cus_System()
	}
	else
	{
		Cus_Process()
	};
	
Cus_Choose_Dish() = Check_Stock(); Customer(); MakeOrder(order);

Check_Stock() = {
	var i = 0;
	while(i < noOfDish) {
		if(stock[i] == 0) {
			out_of_stock = true;
		}
		i++;
	}
}->Skip();

Customer() = pcase {
       10 : cus.DishA{order = DishA} -> Skip
       8 : cus.DishB{order = DishB} -> Skip
       10 : cus.DishC{order = DishC} -> Skip
       7 : cus.DishD{order = DishD} -> Skip
       5 : cus.DishE{order = DishE} -> Skip
       3 : cus.DishF{order = DishF} -> Skip
};

MakeOrder(dish) = {
	sales = sales + price[dish];
	stock[dish] = stock[dish] - 1;
	food_has_been_ordered[dish]++;
	index++;
}->Skip();


#define goal sales > costPerDay;
#define goal_no_redundant_menu (redundancy_menu == REDUNDANT_NO && redundancy_menu != REDUNDANT_CHECKING && sales > costPerDay); 
#define goal_redundant_menu (redundancy_menu == REDUNDANT && redundancy_menu != REDUNDANT_CHECKING && sales > costPerDay);
#define goal_no_out_of_stock (out_of_stock == false && sales > costPerDay);



#assert Cus_System() deadlockfree;
#assert Cus_System() reaches goal_no_redundant_menu;
#assert Cus_System() reaches goal_no_redundant_menu with min (index);
#assert Cus_System() reaches goal_no_out_of_stock;

#assert Cus_System() reaches goal_redundant_menu;
#assert Cus_System() reaches goal_redundant_menu with min (index);
#assert Cus_System() reaches goal_redundant_menu with min (redundant_menu_count);
#assert Cus_System() reaches goal with prob;
#assert Cus_System() reaches goal with min(sales);
#assert Cus_System() reaches goal with max(sales);
#assert Cus_System() reaches goal with max(index);