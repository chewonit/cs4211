enum{DishA, DishB, DishC, DishD, DishE, DishF};
var price = [8,9,8,17, 11, 13];

#define customer 1000;
#define costPerDay 100;

var order = -1;
var sales = 0;
var index = 0;

Init() = {
	sales = 0;
	index = 0;
	order = -1;
}->Skip();


Cus_System() = Init(); Cus_Process();

Cus_Process() = Cus_Choose_Dish();
	if(index == customer || sales > costPerDay) 
	{
		Cus_System()
	}
	else
	{
		Cus_Process()
	};
	
Cus_Choose_Dish() = Customer(); MakeOrder(order);

Customer() = pcase {
       10 : cus.DishA{order = DishA} -> Skip
       8 : cus.DishB{order = DishB} -> Skip
       10 : cus.DishC{order = DishC} -> Skip
       7 : cus.DishD{order = DishD} -> Skip
       5 : cus.DishE{order = DishE} -> Skip
       3 : cus.DishF{order = DishF} -> Skip
};

MakeOrder(dish) = {
	sales = sales + price[dish];
	index++;
}->Skip();






#define goal sales > costPerDay;
#assert Cus_Choose_Dish() deadlockfree;
#assert Cus_System() deadlockfree;
#assert Cus_System() reaches goal with prob;
#assert Cus_System() reaches goal with min(sales);
#assert Cus_System() reaches goal with max(sales);
#assert Cus_System() reaches goal with max(index);